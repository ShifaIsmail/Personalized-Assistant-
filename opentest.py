import os
import speech_recognition as sr
import pyttsx3
import webbrowser
import time
import datetime
import openai
import random 
import numpy as np
import pyaudio
from config import apikey

chatStr = ""

def chat(query):
    global chatStr
    print(chatStr)
    openai.api_key = apikey
    chatStr += f" Author: {query}\n Izume:"
    response = openai.Completion.create(
        model="gpt-4o-mini-2024-07-18",
        prompt=chatStr,
        temperature=1,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    say(response["choices"][0]["text"])
    chatStr += f"{response['choices'][0]['text']}\n"
    return response["choices"][0]["text"]

def ai(prompt):
    openai.api_key = apikey
    response = openai.Completion.create(
        model="gpt-4o-mini-2024-07-18",
        prompt=prompt,
        temperature=1,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    text = response["choices"][0]["text"]
    if not os.path.exists("ai"):
        os.mkdir("ai")

    with open(f"ai/{''.join(prompt.split('intelligence')[1:]).strip()}.txt", "w") as f:
        f.write(text)

def say(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        audio = r.listen(source)
        try:
            query = r.recognize_google(audio, language="en-in")
            print(f"User said: {query}")
            return query
        except sr.UnknownValueError:
            return "Sorry, I didn't understand that"
        except sr.RequestError:
            return "Could not request results; check your network connection"
        except Exception as e:
            return f"An error occurred: {e}"

if __name__ == '__main__':
    engine = pyttsx3.init()
    say("Hi there! I am Izume, your AI assistant")
    while True:
        print("Listening...")
        query = takeCommand().lower()
        if query:
            command_found = False
            sites = [["youtube", "https://www.youtube.com"], ["wikipedia", "https://www.wikipedia.com"], ["google", "https://www.google.com"], ["instagram", "https://www.instagram.com"], ["snapchat", "https://www.snapchat.com"], ["twitter", "https://www.x.com"], ["chatgpt", "https://www.chatgpt.com"], ["gemini", "https://www.gemini.com"], ["pinterest", "https://www.pinterest.com"], ["reddit", "https://www.reddit.com"]]
            for site in sites:
                if f"open {site[0]}" in query:
                    say(f"Let's look into {site[0]}")
                    webbrowser.open(site[1])
                    time.sleep(5)
                    command_found = True
                    break
            if "play instrument" in query:
                musicPath = "C:/Users/shifa/Music/E-guitarCover.mp3"
                os.startfile(musicPath)
                command_found = True
            if "play music" in query:
                musicPath = "C:/Users/shifa/Music/Sleeping Child MLtR.mp3"
                os.startfile(musicPath)
                command_found = True
            if "what's the time" in query:
                strfTime = datetime.datetime.now().strftime("%H:%M:%S")
                say(f"It's {strfTime} on the clock now.")
                command_found = True
            if "exit" in query or "quit" in query:
                say("Great talking to you. Goodbye!")
                break
            if "using artificial intelligence" in query:
                ai(prompt=query)
                command_found = True
            if "jarvis quit" in query:
                exit()
            if "reset chat" in query:
                chatStr = ""
                command_found = True

            if not command_found:
                print("Chatting...")
                chat(query)
